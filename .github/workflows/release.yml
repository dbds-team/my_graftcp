name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        architecture: [x86_64, aarch64]
        include:
          - architecture: x86_64
            cross_compile: ""
            arch_name: "linux-amd64"
          - architecture: aarch64
            cross_compile: "aarch64-linux-gnu-"
            arch_name: "linux-arm64"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        if [ "${{ matrix.architecture }}" = "aarch64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build all programs
      run: |
        # Build C程序 (graftcp) with static linking
        make CROSS_COMPILE=${{ matrix.cross_compile }} LDFLAGS="-static" graftcp libgraftcp.a

        # Build Go程序 (graftcp-local, mgraftcp) with static linking
        cd local
        if [ "${{ matrix.architecture }}" = "aarch64" ]; then
          GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=${{ matrix.cross_compile }}gcc CXX=${{ matrix.cross_compile }}g++ AR=${{ matrix.cross_compile }}ar go build -ldflags "-s -w -linkmode external -extldflags '-static' -X main.version=${{ github.ref_name }}" ./cmd/graftcp-local
          GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=${{ matrix.cross_compile }}gcc CXX=${{ matrix.cross_compile }}g++ AR=${{ matrix.cross_compile }}ar go build -ldflags "-s -w -linkmode external -extldflags '-static' -X main.version=${{ github.ref_name }}" ./cmd/mgraftcp
        else
          CGO_ENABLED=0 go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" ./cmd/graftcp-local
          CGO_ENABLED=1 go build -ldflags "-s -w -linkmode external -extldflags '-static' -X main.version=${{ github.ref_name }}" ./cmd/mgraftcp
        fi

    - name: Create release archive
      run: |
        mkdir -p release
        cp graftcp local/graftcp-local local/mgraftcp release/
        cp README.md README.zh-CN.md COPYING example-*.* release/
        tar -czf graftcp-${{ github.ref_name }}-${{ matrix.arch_name }}.tar.gz -C release .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: graftcp-${{ matrix.arch_name }}
        path: graftcp-${{ github.ref_name }}-${{ matrix.arch_name }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/graftcp-linux-amd64/graftcp-${{ github.ref_name }}-linux-amd64.tar.gz
          artifacts/graftcp-linux-arm64/graftcp-${{ github.ref_name }}-linux-arm64.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

